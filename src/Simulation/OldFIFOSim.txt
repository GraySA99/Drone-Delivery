private void runFIFO(){
        //runs FIFO simulations

        double currentTime = 0, tripTime = 0, calcTime, waitedTime, homeTime;
        int currentOrder = 0, prevResult = 1; //tracks the current order in currentOrderQueue
        boolean launched = false, canLoad = true;

        while (currentOrderQueue.size() > 0 || drone.getNumOrders() > 0){
            System.out.println("The queue size is " + currentOrderQueue.size() + "\tThe number of orders on the drone is " + drone.getNumOrders());
            if(drone.getCurrentPosition().isStarting()){
                launched = false;
                canLoad = true;
                //tripTime = 0;
                waitedTime = 0;

                //when the drone is at the starting point and it's within the first five minutes of the simulation
                if(currentTime <= 5){
                    //the drone will add any available orders if it can. If the drone is full then it will launch
                    while(!launched && currentTime <= 5){
                        while(times.get(currentOrder) <= currentTime && !launched && currentTime <= 5){
                            if(drone.getCurrentWeight() + currentOrderQueue.get(0).getMeal().getTotalWeight() < drone.getWeightCapacity()){ //check weight
                                System.out.print("Added order to drone that was available at time " + times.get(currentOrder) + " at time " + currentTime + "\t");
                                int a = 1;
                                while(times.get(currentOrder) - (60 * a) > 0){
                                    a++;
                                }
                                if(a != prevResult){
                                    drone.addFIFODeliveryTime(-1);
                                    prevResult = a;
                                }
                                System.out.println("\n" + a + "\n");
                                loadOrder(currentTime);
                                currentOrder++;
                            } else { //launch
                                drone.setOrdersList(sortOrders(drone.getOrdersList()));
                                //resets the pickup times as the drone did not really leave until this point
                                for(int i = 0; i < drone.getNumOrders(); i++){
                                    drone.getOrderOnDrone(i).setPickUpTime(currentTime);
                                }
                                System.out.print("Began launch sequence. TSP has been called.");
                                calcTime = calculateTime(simMap.getStartingPoint(), drone.getOrderOnDrone(0).getDestination());
                                System.out.print(" The calculated time is " + calcTime + " while old current time is " + currentTime);
                                currentTime += calcTime;
                                tripTime += calcTime;
                                System.out.print(" The new time is " + currentTime + " while current trip time is " + tripTime + "\n");
                                deliverOrder(currentTime);
                                launched = true;
                            }
                            if(currentTime == 5){
                                launched = true;
                            }
                        }

                        if(times.get(currentOrder) > currentTime && !launched){//increment time if not full
                            System.out.println("The drone waited a minute for more orders to appear.");
                            currentTime++;
                            waitedTime++;
                            if(waitedTime >= 3){//may need changed depending on what Valentine wants
                                tripTime = 0;
                            }
                        }
                    }

                    //when the drone is at the starting position and it's not within the first five minutes of the simulation
                } else {
                    //resets the pickup times for the orders that were loaded before the five minute mark
                    if(currentTime < 7){
                        for(int i = 0; i < drone.getNumOrders(); i++){
                            drone.getOrderOnDrone(i).setPickUpTime(currentTime);
                        }
                    }
                    while(canLoad && currentOrder <= times.size() - 1){
                        while(times.get(currentOrder) <= currentTime && canLoad){//loads available orders until weight capacity is hit
                            if(drone.getCurrentWeight() + currentOrderQueue.get(0).getMeal().getTotalWeight() < drone.getWeightCapacity()){ //check weight
                                System.out.print("Added order to drone that was available at time " + times.get(currentOrder) + " at time " + currentTime + "\t");
                                int a = 1;
                                while(times.get(currentOrder) - (60 * a) > 0){
                                    a++;
                                }
                                if(a != prevResult){
                                    drone.addFIFODeliveryTime(-1);
                                    prevResult = a;
                                }
                                System.out.println("\n" + a + "\n");
                                loadOrder(currentTime);
                                currentOrder++;
                                if(currentOrder >= times.size() - 1){
                                    canLoad = false;
                                    break;
                                }
                            } else {
                                canLoad = false;
                            }
                        }

                        //the drone will launch if it has anything on it
                        if(drone.getCurrentWeight() > 0){
                            canLoad = false;
                        } else if(times.get(currentOrder) > currentTime && canLoad){ //the drone will wait for more orders
                            System.out.println("The drone waited a minute for more orders to appear.");
                            currentTime++;
                            waitedTime++;
                            if(waitedTime >= 3){ //may need changed depending on what Valentine wants
                                tripTime = 0;
                            }
                        }
                    }


                    drone.setOrdersList(sortOrders(drone.getOrdersList()));
                    System.out.print("Began launch sequence. TSP has been called.");
                    calcTime = calculateTime(simMap.getStartingPoint(), drone.getOrderOnDrone(0).getDestination());
                    System.out.print(" The calculated time is " + calcTime + " while old current time is " + currentTime);

                    //checks if the drone will be able to make it to the next destination and back with its remaining flight time
                    //adds the turnAroundTime if the drone won't make it
                    if(tripTime + (calcTime * 2) > drone.getMaxFlightTime()){
                        System.out.print(" The drone had to wait to recharge before leaving. The trip time was " + tripTime);
                        currentTime += drone.getTurnAroundTime();
                        tripTime = 0;
                    }
                    currentTime += calcTime;
                    tripTime += calcTime;
                    System.out.print(" The new time is " + currentTime + " while current trip time is " + tripTime + "\n");
                    deliverOrder(currentTime);

                }
            } else {
                //the drone is not home and is empty
                if(drone.getNumOrders() == 0){
                    //add a time tracker for the current trip to make sure it won't surpass 20 min. Should check next route time and time to get home

                    calcTime = calculateTime(drone.getCurrentPosition(), simMap.getStartingPoint());
                    System.out.print("The drone has run out of orders and has returned home. The calc time was " + calcTime + " the old current time is " + currentTime);
                    currentTime += calcTime;
                    System.out.print(" And the new current time is " + currentTime);
                    tripTime += calcTime;
                    drone.setCurrentPosition(simMap.getStartingPoint());
                } else { //the drone is not home and has orders
                    //the drone figures out if it can make it to its next destination and home if it needs to charge
                    calcTime = calculateTime(drone.getCurrentPosition(), drone.getOrderOnDrone(0).getDestination());
                    homeTime = calculateTime(drone.getOrderOnDrone(0).getDestination(), simMap.getStartingPoint());

                    //the drone returns home
                    if(tripTime + calcTime + homeTime > drone.getMaxFlightTime() - 0.5){
                        System.out.print("After " + tripTime + " min of trip time, the drone has decided to return home.");
                        calcTime = calculateTime(drone.getCurrentPosition(), simMap.getStartingPoint());
                        System.out.print("The calc time was" + calcTime + " the old current time is " + currentTime);
                        currentTime += calcTime + 3;
                        System.out.print(" And the new current time is " + currentTime);
                        drone.setCurrentPosition(simMap.getStartingPoint());
                        tripTime = 0;
                    } else { //the drone continues its current delivery path
                        currentTime += calcTime;
                        tripTime += calcTime;
                        System.out.print(" The new time is " + currentTime + " while current trip time is " + tripTime + "\n");
                        deliverOrder(currentTime);
                    }
                }
            }
        }
    }